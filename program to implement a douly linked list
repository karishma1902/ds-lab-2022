// program to implement a doubly linked list//
#include <stdio.h>
#include <stdlib.h>

struct node//declaring a struct node//
{
   struct node *prev;
   struct node *next;
   int data;
};
struct node *head;

void insert_begin();
void insert_last();
void insert_random();
void delete_begin();
void delete_last();
void delete_random();
void display();
//menu
void main()
{
   int choice ;
   while (1)
   {
      printf("1. Insert at beginning\n2. Insert at last\n3. Insert at random\n4. Delete at beginning\n5. Delete at last\n6. Delete at random\n7. Display\n8. Exit\n");
      printf("Choose one option\n");
      scanf("%d", &choice);

      switch (choice)
      {
      case 1:
         insert_begin();
         break;
      case 2:
         insert_last();
         break;
      case 3:
         insert_random();
         break;
      case 4:
         delete_begin();
         break;
      case 5:
         delete_last();
         break;
      case 6:
         delete_random();
         break;
      case 7:
         display();
         break;
      case 8:
         exit(0);
         break;
      default:
         printf("Invalid choice\n");
      }
   }
}

void insert_begin()//function to insert a node in the list//
{
   struct node *ptr;
   int item;
   ptr = (struct node *)malloc(sizeof(struct node));
   if (ptr == NULL)
      printf("Overflow\n");

   else
   {
      printf("Enter item value\n");//the data of new node to be inserted is taken from the user//
      scanf("%d", &item);
      if (head == NULL)
      {
         ptr->next = NULL;
         ptr->prev = NULL;
         ptr->data = item;
         head = ptr;
      }

      else
      {
         ptr->data = item;
         ptr->prev = NULL;
         ptr->next = head;
         head->prev = ptr;
         head = ptr;
      }
      printf("Node inserted\n");
   }
}
//function to insert a node at the end of the list
void insert_last()
{
   struct node *ptr, *temp;
   int item;
   ptr = (struct node *)malloc(sizeof(struct node));
   if (ptr == NULL)
      printf("Overflow\n");

   else
   {
      printf("Enter item value:\n");
      scanf("%d", &item);
      ptr->data = item;
      if (head == NULL)
      {
         ptr->next = NULL;
         ptr->prev = NULL;
         head = ptr;
      }

      else
      {
         temp = head;
         while (temp->next != NULL)
         {
            temp = temp->next;
         }
         temp->next = ptr;
         ptr->prev = temp;
         ptr->next = NULL;
      }

      printf("Node inserted\n");
   }
}
//function to insert a node at a random position
void insert_random()
{
   struct node *ptr, *temp;
   int item, loc, i;
   ptr = (struct node *)malloc(sizeof(struct node));
   if (ptr == NULL)
      printf("Overflow\n");

   else
   {
      temp = head;
      printf("Enter the location\n");//takes the location of where the new node is to be added//
      scanf("%d", &loc);
      for (i = 0; i < loc; i++)
      {
         temp = temp->next;
         if (temp == NULL)
         {
            printf("Less than %d elements\n", loc);
            return;
         }
      }

      printf("Enter value\n");
      scanf("%d", &item);
      ptr->data = item;
      ptr->next = temp->next;
      ptr->prev = temp;
      temp->next = ptr;
      temp->next->prev = ptr;
      printf("Node inserted\n");
   }
}
//function to delete a node at the begining of the list//
void delete_begin()
{
   struct node *ptr;
   if (head == NULL)
      printf("Underflow\n");

   else if (head->next == NULL)
   {
      head = NULL;
      free(head);
      printf("Node deleted\n");
   }

   else
   {
      ptr = head;
      head = head->next;
      head->prev = NULL;
      free(ptr);
      printf("Node deleted\n");
   }
}
//function to delete a node from the end of the list//
void delete_last()
{
   struct node *ptr;
   if (head == NULL)
      printf("Underflow\n");

   else if (head->next == NULL)
   {
      head = NULL;
      free(head);
      printf("Node deleted\n");
   }

   else
   {
      ptr = head;
      if (ptr->next != NULL)
         ptr = ptr->next;

      ptr->prev->next = NULL;
      free(ptr);
      printf("Node delted\n");
   }
}
//function to delete a node at a random position in the list//
void delete_random()
{
   struct node *ptr, *temp;
   int val;
   printf("Enter the data after which the node is to be deleted\n");
   scanf("%d", &val);
   ptr = head;
   while (ptr->data != val)
      ptr = ptr->next;

   if (ptr->next == NULL)
      printf("Can't delete\n");

   else if (ptr->next->next == NULL)
      ptr->next = NULL;

   else
   {
      temp = ptr->next;
      ptr->next = temp->next;
      temp->next->prev = ptr;
      free(temp);
      printf("Node deleted\n");
   }
}
//function to dispaly the elements of the list//
void display()
{
   struct node *ptr;
   printf("Printing values\n");
   ptr = head;

   while (ptr != NULL)
   {
      printf("%d\n", ptr->data);
      ptr = ptr->next;
   }
}
